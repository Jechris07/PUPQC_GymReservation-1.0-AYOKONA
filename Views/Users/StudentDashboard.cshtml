@{
    ViewData["Title"] = "StudentDashboard";
    Layout = "~/Views/Shared/Students_Layout.cshtml";
}

@section Styles {
    <style>
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            gap: 1px;
            background-color: #d9d9d9;
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .calendar-header-cell, .calendar-cell {
            padding: 0.75rem 0.5rem;
            text-align: center;
            background-color: white;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid #d9d9d9;
            color: #970c10;
        }

            .calendar-cell:not(.reserved-slot) {
                font-weight: bold;
            }

        .calendar-header-cell {
            background-color: #f3f4f6;
            font-weight: 600;
            color: #970c10;
        }

        .reserved-slot {
            background-color: #970c10;
            color: white;
            font-weight: 500;
        }

        .status-approved {
            background-color: #00bf63;
            color: white;
        }

        .status-pending {
            background-color: #ffb000;
            color: white;
        }

        .status-rejected {
            background-color: dimgrey;
            color: white;
        }

        .reservation-item-bg {
            background-color: #ffb000;
            border-color: #ffb000;
        }

        .month-nav-arrow {
            font-size: 1.5rem;
            line-height: 1;
            color: #970c10;
        }

        @@media (max-width: 640px) {
            .calendar-grid {
                overflow-x: auto;
            }

                .calendar-grid > div {
                    min-width: 80px;
                }
        }
    </style>
}

<div class="w-full p-6 flex-grow flex flex-col">
    <h1 class="text-3xl font-bold mb-4" style="color: #970c10;">Dashboard</h1>

    <h2 class="text-2xl font-semibold mt-4 mb-2" style="color: #970c10;">Your Reservations</h2>
    <div class="bg-white p-8 rounded-lg shadow-lg flex flex-col">
        <div id="userReservationsContainer" class="space-y-3 flex-grow">
            <p class="text-gray-500 text-center py-4" style="color: #970c10;">Loading your reservations...</p>
        </div>
        <div class="text-center mt-4">
            <a href="/User/MyReservations" id="viewMyReservationsLink" class="underline text-sm font-bold" style="color: #970c10;">View All Reservations</a>
        </div>
    </div>

    <h2 class="text-2xl font-semibold mt-6 mb-2" style="color: #970c10;">Gym Availability</h2>
    <div class="bg-white p-8 rounded-lg shadow-lg">
        <div class="flex items-center justify-between mb-4">
            <button id="prevMonthBtn" class="hover:text-blue-800 transition-colors text-lg font-semibold">
                <span class="month-nav-arrow">&#10094;</span>
                <span id="prevMonthText" style="color: #ffb000;"></span>
            </button>
            <span id="currentMonthYear" class="text-2xl font-bold" style="color: #970c10;"></span>
            <button id="nextMonthBtn" class="hover:text-blue-800 transition-colors text-lg font-semibold">
                <span id="nextMonthText" style="color: #ffb000;"></span>
                <span class="month-nav-arrow">&#10095;</span>
            </button>
        </div>

        <div id="calendarGrid" class="calendar-grid shadow-md">
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Get the UserId from ViewData (passed by the C# controller)
        const currentUserId = '@ViewData["UserId"]';

        // Initialize current month and year to the current date
        let today = new Date();
        let currentMonth = today.getMonth();
        let currentYear = today.getFullYear();

        const timeSlots = [
            "7:30 AM - 10:30 AM",
            "10:30 AM - 1:30 PM",
            "1:30 PM - 4:30 PM",
            "4:30 PM - 7:30 PM",
            "7:30 PM - 8:30 PM"
        ];

        document.getElementById('viewMyReservationsLink').addEventListener('click', (e) => {
            e.preventDefault();
            window.location.href = '/User/MyReservations';
        });

        async function renderUserReservations() {
            const container = document.getElementById('userReservationsContainer');
            container.innerHTML = '<p class="text-gray-500 text-center py-4" style="color: #970c10;">Loading your reservations...</p>';

            if (!currentUserId || currentUserId === '') {
                container.innerHTML = '<p class="text-red-500 text-center py-4" style="color: #970c10;">User ID not found. Cannot load reservations.</p>';
                console.error("User ID is not available. Cannot fetch user-specific reservations.");
                return;
            }

            try {
                // --- DEBUGGING TIP: Check this API endpoint ---
                // Ensure your backend for user reservations is running and accessible at this URL.
                // Open browser console (F12) -> Network tab to see the request status and response.
                const response = await fetch(`http://localhost:44318/api/reservations/user/${currentUserId}`);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const allReservations = await response.json();

                if (allReservations.length === 0) {
                    container.innerHTML = '<p class="text-gray-500 text-center py-4" style="color: #970c10;">You have no active reservations.</p>';
                } else {
                    allReservations.sort((a, b) => new Date(b.reservationDate) - new Date(a.reservationDate));
                    const recentReservations = allReservations.slice(0, 3);

                    container.innerHTML = '';

                    recentReservations.forEach(reservation => {
                        const reservationDiv = document.createElement('div');
                        let statusClass = '';
                        if (reservation.status === 'Approved') {
                            statusClass = 'status-approved';
                        } else if (reservation.status === 'Pending') {
                            statusClass = 'status-pending';
                        } else if (reservation.status === 'Rejected') {
                            statusClass = 'status-rejected';
                        }

                        reservationDiv.className = `flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 rounded-lg shadow-sm reservation-item-bg`;
                        reservationDiv.innerHTML = `
                            <div class="flex flex-col">
                                <span class="text-lg font-medium text-white">Date: ${new Date(reservation.reservationDate).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</span>
                                <span class="text-md text-white">Time: ${reservation.timeSlot}</span>
                                <span class="text-md text-white">Purpose: ${reservation.purposeOfUse || 'N/A'}</span>
                            </div>
                            <span class="mt-2 sm:mt-0 px-3 py-1 text-sm font-semibold rounded-full ${statusClass}">Status: ${reservation.status}</span>
                        `;
                        container.appendChild(reservationDiv);
                    });
                }
            } catch (error) {
                console.error('Error fetching user reservations:', error);
                container.innerHTML = '<p class="text-red-500 text-center py-4" style="color: #970c10;">Error loading your reservations. Please try again.</p>';
            }
        }

        async function renderCalendar(month, year) {
            const calendarGrid = document.getElementById('calendarGrid');
            calendarGrid.innerHTML = '';

            document.getElementById('currentMonthYear').textContent = new Date(year, month).toLocaleString('en-US', { month: 'long', year: 'numeric' });
            document.getElementById('currentMonthYear').style.color = '#970c10';

            document.getElementById('prevMonthText').textContent = new Date(year, month - 1).toLocaleString('en-US', { month: 'long' });
            document.getElementById('nextMonthText').textContent = new Date(year, month + 1).toLocaleString('en-US', { month: 'long' });
            document.getElementById('prevMonthText').style.color = '#ffb000';
            document.getElementById('nextMonthText').style.color = '#ffb000';

            const daysHeaderCell = document.createElement('div');
            daysHeaderCell.className = 'calendar-header-cell';
            daysHeaderCell.textContent = 'Days';
            calendarGrid.appendChild(daysHeaderCell);

            timeSlots.forEach(slot => {
                const headerCell = document.createElement('div');
                headerCell.className = 'calendar-header-cell';
                headerCell.textContent = slot;
                calendarGrid.appendChild(headerCell);
            });

            let reservedSlotsData = [];
            try {
                // --- DEBUGGING TIP: This is likely the main source of the problem! ---
                // 1. Ensure your API for gym availability is running at http://localhost:5000.
                // 2. Check your browser's developer console (F12) -> Network tab for the status of this request.
                //    Look for status codes other than 200 (e.g., 404 Not Found, 500 Internal Server Error, or CORS errors).
                // 3. Verify the URL path and parameters: `/api/gymAvailability/${year}/${month + 1}`.
                //    (month + 1 because JavaScript months are 0-indexed, while API usually expects 1-indexed).
                const response = await fetch(`http://localhost:5000/api/gymAvailability/${year}/${month + 1}`);

                if (!response.ok) {
                    console.error(`Gym Availability API responded with status: ${response.status} - ${response.statusText}`);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                reservedSlotsData = await response.json();
            } catch (error) {
                console.error('Error fetching gym availability:', error);
                const errorCell = document.createElement('div');
                errorCell.className = 'calendar-cell';
                errorCell.style.gridColumn = '1 / span 6';
                errorCell.style.color = 'red';
                errorCell.textContent = 'Error loading availability. Please check console for details.';
                calendarGrid.appendChild(errorCell);
            }

            const daysInMonth = new Date(year, month + 1, 0).getDate();

            for (let day = 1; day <= daysInMonth; day++) {
                const dayCell = document.createElement('div');
                dayCell.className = 'calendar-cell';
                dayCell.textContent = day;
                calendarGrid.appendChild(dayCell);

                timeSlots.forEach(slot => {
                    const dateToCheck = new Date(year, month, day);
                    const formattedDateForComparison = dateToCheck.toISOString().slice(0, 10);

                    const isReserved = reservedSlotsData.some(res =>
                        new Date(res.reservationDate).toISOString().slice(0, 10) === formattedDateForComparison &&
                        res.timeSlot === slot
                    );

                    const slotCell = document.createElement('div');
                    slotCell.className = `calendar-cell ${isReserved ? 'reserved-slot' : ''}`;
                    calendarGrid.appendChild(slotCell);
                });
            }
        }

        document.getElementById('prevMonthBtn').addEventListener('click', () => {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            renderCalendar(currentMonth, currentYear);
        });

        document.getElementById('nextMonthBtn').addEventListener('click', () => {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            renderCalendar(currentMonth, currentYear);
        });

        window.onload = () => {
            renderUserReservations();
            renderCalendar(currentMonth, currentYear);
        };
    </script>
}